import numpy as np
import time

def sudokuiter(x):
    global board
    board = np.copy(x)
    find = next_spots(board)
    if find:
        pos, num, choice = find[0]
        row = pos[0]
        col = pos[1]
    else:
        return True
    
    
    for i in choice:
        board[row,col]=i
        if sudokuiter(board):
            return True
        
        board[row,col]=0
        
    return False

def next_spots(board):
    spots = []
    found = 0
    for i in range(9):
        for j in range(9):
            if board[i][j] == 0:
                found = 1
                sp = (i,j)
                
                wbox = (i//3,j//3)
                nums = {1,2,3,4,5,6,7,8,9}
                row_check = set(board[i])
                column_check = set(board[:,j])
                box = set(np.concatenate(board[(wbox[0]*3):(wbox[0]*3+3),(wbox[1]*3):(wbox[1]*3+3)]))
                choice = (((nums - row_check) - column_check) - box)
                
                spots.append([sp,len(choice),choice])
    
    if found == 1:
        return sorted(spots, key=lambda l: l[1])  
                
    if found == 0:            
        return False

def sudoku(puzzle):
    t0 = time.time()
    if sudokuiter(puzzle):
        t1 = time.time()
        print(t1-t0)
        return np.ndarray.tolist(board)

